import os
import json
from urllib.parse import parse_qs
from modules.logger import Logger
from modules.data_collector import DataCollector
from modules.data_processor import DataProcessor
from modules.prediction_evaluator import PredictionEvaluator
from modules.performance_tracker import PerformanceTracker
from modules.chart_generator import ChartGenerator


def load_config(config_file="config.json"):
    try:
        with open(config_file, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        return {}


def process_request(params):
    print("üîç process_request –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è")
    config = load_config()
    logger = Logger()
    tracker = PerformanceTracker(logger)
    collector = DataCollector(logger)
    processor = DataProcessor(logger)
    evaluator = PredictionEvaluator(logger)
    chart_gen = ChartGenerator(logger)

    stock = params.get("stock", [""])[0].strip()
    start_date = params.get("start_date", [""])[0].strip()
    end_date = params.get("end_date", [""])[0].strip()
    prediction = params.get("prediction", [""])[0].strip()

    logger.info(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É: stock={stock}, start_date={start_date}, end_date={end_date}, prediction={prediction}")
    if not (stock and start_date and end_date and prediction):
        return "<h2>‚ö†Ô∏è –£—Å—ñ –ø–æ–ª—è —Ñ–æ—Ä–º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!</h2>"

    tracker.start("data_collection")
    data = collector.fetch_data(stock, start_date, end_date)  # –º–∞—î –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ pd.DataFrame
    tracker.stop("data_collection")

    if all([df is None or df.empty for _, df in data]):
        return f"<h2>‚ö†Ô∏è –î–∞–Ω—ñ –¥–ª—è –∞–∫—Ü—ñ—ó {stock} –∑–∞ –ø–µ—Ä—ñ–æ–¥ {start_date} - {end_date} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞.</h2>"

    os.makedirs("data", exist_ok=True)
    files = []
    for site, df in data:
        filename = f"data/{site}_{stock}_{start_date}_{end_date}.csv"
        files.append(filename)
        df.to_csv(filename)
        logger.info(f"–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª {filename}")

    # tracker.start("data_processing")
    # cleaned_data = processor.clean_data(data)
    # transformed_data = processor.transform_data(cleaned_data)
    # tracker.stop("data_processing")

    tracker.start("prediction_evaluation")
    errors = evaluator.evaluate(data, prediction)
    tracker.stop("prediction_evaluation")

    chart_path = chart_gen.generate_price_chart(data, ticker=stock)
    chart_html = f'<p><img src="/{chart_path}" alt="Price Chart"></p>' if chart_path else ""

    report = tracker.generate_report()
    report_html = "<ul>" + "".join([f"<li>{line}</li>" for line in report]) + "</ul>"


    if errors:
        result_text = ""
        for site, error in errors:
            result_text += f"<p>–ê–±—Å–æ–ª—é—Ç–Ω—ñ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É ({site}): {error:.2f}</p>\n"
    if not errors:
        result_text = "<p>–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ü—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑.</p>"


    return f"""
    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–∫—Ü—ñ—ó {stock} ({start_date} - {end_date}):</h2>
    <p>–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª–∏: <br>{'<br>'.join(files)}</p>
    <h3>–ì—Ä–∞—Ñ—ñ–∫ –¥–∏–Ω–∞–º—ñ–∫–∏ —Ü—ñ–Ω:</h3>
    {chart_html}
    <h3>–ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</h3>
    {report_html}
    <p><a href="/">–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Ñ–æ—Ä–º–∏</a></p>
    """


if __name__ == "__main__":
    from wsgiref.simple_server import make_server
    import server

    try:
        with make_server("", 8000, server.application) as httpd:
            print("Serving on port 8000...")
            httpd.serve_forever()
    except KeyboardInterrupt:
        print("\n–°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (Ctrl+C).")

